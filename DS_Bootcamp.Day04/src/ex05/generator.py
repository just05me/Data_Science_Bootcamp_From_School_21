import sys
import resource


def read_file(name):
    with open(name, "r") as file:
        for i in file:
            # Читает одну строку и останавливает процесс как return, но тут из-за цикла процесс продолжается с места остановаки через yield
            yield i
    

if __name__ == "__main__":
    little = sys.argv

    if len(little) == 2:
        data = read_file(little[1])

        # Тута измеряется начальная нагрузка на память
        """ 
        resource.getrusage - это функция возвращает данные 
        - Об CPU: насколько она используется
        - Сколько памяти потребляется
        """
        # resource.RUSAGE_SELF - константа указатель о текущих процессах 
        # ru_maxrss - указатель выдающий максимальную используемую память (резидентная память)
        """
        RSS - резидентная память:
        - Память, которую процесс занял, то есть что-то сохранил в виртуальную память. 
        - Именно резидентная память показывает сколько процесс потребляет физической памяти.
        """ 
        startMemory = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss

        for i in data:
            pass

        # resource.getrusage - получает статистику использования ресурсов для текущего процесса
        # resource.RUSAGE_SELF - константа указатель о текущих процессах 
        # ru_maxrss - указатель выдающий максимальную используемую память (резидентная память) и от нее мы вычитываем первоначальные характеристики и получаем данные о текущем процессе
        # ru_maxrss - возвращает данные о процесса в Kb
        Memory = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss - startMemory

        # ru_utime - возвращает данные о времени. Сколько времени потребовалось чтобы сделать этот скрипт. Она по факту возвращает врема работы любого процесса, но в нашем случае это работа нашего скрипта
        # - Время, проведенное в пользовательском режиме - Запуск этого скрипта
        # ru_stime - Тоже самое, но тут уже мерит время работы системы
        # - Время, проведенное в системном режиме - Вызов ядра / Чтения файла
        # Получаем время работы всего скрипта при складывание этих данных
        time = resource.getrusage(resource.RUSAGE_SELF).ru_utime + resource.getrusage(resource.RUSAGE_SELF).ru_stime

        # Так как ru_maxrss возвращает данные в Kb переведем их в Gb
        print(f"Peak Memory Usage = {Memory / 1024 / 1024:.3f} GB")
        print(f"User Mode Time + System Mode Time = {time:.2f}s")